% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict.model_stack}
\alias{predict.model_stack}
\title{Model predictions}
\usage{
\method{predict}{model_stack}(object, new_data, type = NULL, members = FALSE, opts = list(), ...)
}
\arguments{
\item{object}{A model stack with fitted members.}

\item{new_data}{A rectangular data object, such as a data frame.}

\item{type}{Format of returned predicted valuesâ€”one of "numeric", "class",
or "prob". When NULL, \code{predict()} will
choose an appropriate value based on the model's mode.}

\item{members}{Logical. Whether or not to additionally return the predictions
for each of the ensemble members.}

\item{opts}{A list of optional arguments to the underlying predict
function passed on to \link[parsnip:predict.model_fit]{parsnip::predict.model_fit} for each member.}

\item{...}{Additional arguments. Currently ignored.}
}
\description{
Apply a model stack to create different types of predictions.
}
\section{Example Data}{


These examples make use of data and resampling objects exported with the
package. All of them are derived from test cases making use of the
\code{penguins} dataset from Allison Horst's \code{palmerpenguins} package.

The \code{penguins_train} and \code{penguins_test} objects are subsets of the
penguins data for using in training and testing, respectively.

Objects containing the substring \verb{_res_} are \code{tune_results} objects
for model specifications. The \code{reg} prefix indicates that the model
definition is for use in regression, \code{class} indicates multinomial
classification, and \code{log} (as in logistic) indicates binomial classification.
The suffix indicates the model definition type. All of these \code{tune_results}
objects are fitted on a 5-fold cross validation of the \code{penguins_train} data.

For the regression setting, these \code{tune_results} objects reflect
models specified to fit \code{body_mass_g} using all of the other variables
as predictors. These objects include:
\itemize{
\item \code{reg_res_lr}: Fitted resamples for a linear regression model
\item \code{reg_res_sp}: Tuning results for a splines model
\item \code{reg_res_svm}: Tuning results for a support vector machine model
}

In the multinomial classification setting, the relevant objects reflect
models specified to fit \code{year} (as a factor) using all of the other variables
as predictors. These objects include:
\itemize{
\item \code{class_res_nn}: Fitted resamples for a neural network model
\item \code{class_res_rf}: Tuning results for a random forest model
}

In the binomial classification setting, the relevant objects reflect models
specified to fit \code{sex} using all of the other variables as predictors.
These objects include:
\itemize{
\item \code{log_res_nn}: Fitted resamples for a neural network model
\item \code{log_res_rf}: Tuning results for a random forest model
}

See \code{?example_data} to learn more about these objects, as well as browse
the source code that generated them.
}

\examples{
\donttest{
# see the "Example Data" section above for
# clarification on the data and tuning results
# objects used in these examples!

data(penguins_test)

# build and fit a regression model stack
reg_st <-
  stacks() \%>\%
  stack_add(reg_res_lr) \%>\%
  stack_add(reg_res_sp) \%>\%
  stack_blend() \%>\%
  stack_fit()

reg_st

# predict on the penguins testing data
predict(reg_st, penguins_test)

# include the predictions from the members
predict(reg_st, penguins_test, members = TRUE)

# build and fit a classification model stack
class_st <-
  stacks() \%>\%
  stack_add(class_res_nn) \%>\%
  stack_add(class_res_rf) \%>\%
  stack_blend() \%>\%
  stack_fit()
 
class_st

# predict year, first as a class, then as
# class probabilities
predict(class_st, penguins_test)
predict(class_st, penguins_test, type = "prob")

# including the member predictions as well
predict(
  class_st, 
  penguins_test, 
  type = "prob", 
  members = TRUE
)
}

}
