% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/example_data.R
\docType{data}
\name{example_data}
\alias{example_data}
\alias{reg_res_svm}
\alias{reg_res_sp}
\alias{reg_res_lr}
\alias{class_res_nn}
\alias{class_res_rf}
\alias{log_res_nn}
\alias{log_res_rf}
\alias{penguins_train}
\alias{penguins_test}
\title{Example Objects}
\format{
An object of class \code{tune_results} (inherits from \code{tbl_df}, \code{tbl}, \code{data.frame}) with 5 rows and 5 columns.

An object of class \code{tune_results} (inherits from \code{tbl_df}, \code{tbl}, \code{data.frame}) with 5 rows and 5 columns.

An object of class \code{resample_results} (inherits from \code{tune_results}, \code{tbl_df}, \code{tbl}, \code{data.frame}) with 5 rows and 5 columns.

An object of class \code{resample_results} (inherits from \code{tune_results}, \code{tbl_df}, \code{tbl}, \code{data.frame}) with 5 rows and 5 columns.

An object of class \code{tune_results} (inherits from \code{tbl_df}, \code{tbl}, \code{data.frame}) with 5 rows and 5 columns.

An object of class \code{resample_results} (inherits from \code{tune_results}, \code{tbl_df}, \code{tbl}, \code{data.frame}) with 5 rows and 5 columns.

An object of class \code{tune_results} (inherits from \code{tbl_df}, \code{tbl}, \code{data.frame}) with 5 rows and 5 columns.
}
\source{
Gorman KB, Williams TD, Fraser WR (2014) Ecological Sexual Dimorphism
and Environmental Variability within a Community of Antarctic Penguins
(\emph{Genus Pygoscelis}). PLoS ONE 9(3): e90081.
\url{https://doi.org/10.1371/journal.pone.0090081}

\url{https://github.com/allisonhorst/palmerpenguins}
}
\usage{
reg_res_svm

reg_res_sp

reg_res_lr

class_res_nn

class_res_rf

log_res_nn

log_res_rf
}
\description{
This package provides some resampling objects and datasets for use in examples
and vignettes derived from a dataset giving measurements on 333 penguins near
Palmer Station, Antarctica.
}
\details{
\code{penguins_train} and \code{penguins_test} are training and testing datasets, which
are subsets of data retrieved from Allison Horst's \code{palmerpenguins} package.

\code{reg_res_lr}, \code{reg_res_svm}, and \code{reg_res_sp} contain regression tuning results
for a linear regression, support vector machine, and spline model, respectively,
fitting \code{body_mass_g} in the \code{palmerpenguins::penguins} data
using all of the other variables as predictors.

\code{class_res_rf} and \code{class_res_nn}, contain multiclass classification tuning
results for a random forest and neural network classification model,
respectively, fitting \code{island} in the \code{palmerpenguins::penguins}
data using all of the other variables as predictors.

\code{log_res_rf} and \code{log_res_nn}, contain binary classification tuning results
for a random forest and neural network classification model, respectively,
fitting \code{sex} in the \code{palmerpenguins::penguins} data
using all of the other variables as predictors.

The source code for generating these objects is given below.

\if{html}{\out{<div class="r">}}\preformatted{# setup: packages, data, resample, basic recipe ------------------------
library(stacks)
library(tune)
library(rsample)
library(parsnip)
library(workflows)
library(recipes)
library(yardstick)
data("penguins", package = "palmerpenguins")

penguins <- penguins[!is.na(penguins$sex),]

set.seed(1)

ctrl_grid <- 
  tune::control_grid(
    save_pred = TRUE,
    save_workflow = TRUE
  )

ctrl_res <- 
  tune::control_resamples(
    save_pred = TRUE,
    save_workflow = TRUE
  )

penguins_split <- rsample::initial_split(penguins)
penguins_train <- rsample::training(penguins_split)
penguins_test  <- rsample::testing(penguins_split)

folds <- rsample::vfold_cv(penguins_train, v = 5)

penguins_reg_rec <- 
  recipes::recipe(body_mass_g ~ ., data = penguins_train) \%>\%
  recipes::step_dummy(recipes::all_nominal()) \%>\%
  recipes::step_zv(recipes::all_predictors())

metric <- yardstick::metric_set(yardstick::rmse)

# linear regression ---------------------------------------
lin_reg_spec <-
  parsnip::linear_reg() \%>\%
  parsnip::set_engine("lm")

reg_wf_lr <- 
  workflows::workflow() \%>\%
  workflows::add_model(lin_reg_spec) \%>\%
  workflows::add_recipe(penguins_reg_rec)

reg_res_lr <- 
  tune::fit_resamples(
    object = reg_wf_lr,
    resamples = folds,
    metrics = metric,
    control = ctrl_res
  )

# SVM regression ----------------------------------
svm_spec <- 
  parsnip::svm_rbf(
    cost = tune::tune(), 
    rbf_sigma = tune::tune()
  ) \%>\%
  parsnip::set_engine("kernlab") \%>\%
  parsnip::set_mode("regression")

reg_wf_svm <- 
  workflows::workflow() \%>\%
  workflows::add_model(svm_spec) \%>\%
  workflows::add_recipe(penguins_reg_rec)

reg_res_svm <- 
  tune::tune_grid(
    object = reg_wf_svm,
    resamples = folds, 
    grid = 5,
    control = ctrl_grid
  )

# spline regression ---------------------------------------
spline_rec <- 
  penguins_reg_rec \%>\%
  recipes::step_ns(bill_length_mm, deg_free = tune::tune("length")) \%>\%
  recipes::step_ns(bill_depth_mm, deg_free = tune::tune("depth"))

reg_wf_sp <- 
  workflows::workflow() \%>\%
  workflows::add_model(lin_reg_spec) \%>\%
  workflows::add_recipe(spline_rec)

reg_res_sp <- 
  tune::tune_grid(
    object = reg_wf_sp,
    resamples = folds,
    metrics = metric,
    control = ctrl_grid
  )

# classification - preliminaries -----------------------------------
penguins_class_rec <- 
  recipes::recipe(island ~ ., data = penguins_train) \%>\%
  recipes::step_dummy(recipes::all_nominal(), -island) \%>\%
  recipes::step_zv(recipes::all_predictors()) \%>\%
  recipes::step_normalize(recipes::all_numeric())

# random forest classification --------------------------------------
rand_forest_spec <- 
  parsnip::rand_forest(
    mtry = tune::tune(),
    trees = 500,
    min_n = tune::tune()
  ) \%>\%
  parsnip::set_mode("classification") \%>\%
  parsnip::set_engine("ranger")

class_wf_rf <-
  workflows::workflow() \%>\%
  workflows::add_recipe(penguins_class_rec) \%>\%
  workflows::add_model(rand_forest_spec)

class_res_rf <- 
  tune::tune_grid(
    object = class_wf_rf, 
    resamples = folds, 
    grid = 10,
    control = ctrl_grid
  )

# neural network classification -------------------------------------
nnet_spec <-
  parsnip::mlp(epochs = 100, hidden_units = 5, dropout = 0.1) \%>\%
  parsnip::set_mode("classification") \%>\%
  parsnip::set_engine("keras", verbose = 0)

class_wf_nn <- 
  workflows::workflow() \%>\%
  workflows::add_recipe(penguins_class_rec) \%>\%
  workflows::add_model(nnet_spec)

class_res_nn <-
  tune::fit_resamples(
    object = class_wf_nn, 
    resamples = folds, 
    control = ctrl_res
  )

# binary classification --------------------------------
penguins_2_class_rec <- 
  recipes::recipe(sex ~ ., data = penguins_train) \%>\%
  recipes::step_dummy(recipes::all_nominal(), -sex) \%>\%
  recipes::step_zv(recipes::all_predictors()) \%>\%
  recipes::step_normalize(recipes::all_numeric())

rand_forest_spec_2 <- 
  parsnip::rand_forest(
    mtry = tune(),
    trees = 500,
    min_n = tune()
  ) \%>\%
  parsnip::set_mode("classification") \%>\%
  parsnip::set_engine("ranger")

log_wf_rf <-
  workflows::workflow() \%>\%
  workflows::add_recipe(penguins_2_class_rec) \%>\%
  workflows::add_model(rand_forest_spec_2)

log_res_rf <- 
  tune::tune_grid(
    object = log_wf_rf, 
    resamples = folds, 
    grid = 10,
    control = ctrl_grid
  )

nnet_spec_2 <-
  parsnip::mlp(epochs = 100, hidden_units = 5, dropout = 0.1) \%>\%
  parsnip::set_mode("classification") \%>\%
  parsnip::set_engine("keras", verbose = 0)

log_wf_nn <- 
  workflows::workflow() \%>\%
  workflows::add_recipe(penguins_2_class_rec) \%>\%
  workflows::add_model(nnet_spec_2)

log_res_nn <-
  tune::fit_resamples(
    object = log_wf_nn, 
    resamples = folds, 
    control = ctrl_res
  )
}\if{html}{\out{</div>}}
}
\keyword{datasets}
